<?php

namespace LOCKSSOMatic\CrudBundle\Tests\Entity;

use Doctrine\Common\Util\Debug;
use LOCKSSOMatic\CoreBundle\Utilities\AbstractTestCase;
use LOCKSSOMatic\CrudBundle\Entity\Pln;

/**
 * Generated by PHPUnit_SkeletonGenerator on 2015-09-15 at 12:04:12.
 */
class PlnPropertyTest extends AbstractTestCase
{

    /**
     * @var Pln
     */
    protected $pln;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        parent::setUp();
    }

    public function testGetNullParent()
    {
        $prop = $this->references->getReference('plnprop-leaf');
        $this->assertNull($prop->getParent());
    }

    public function testGetParent()
    {
        $prop = $this->references->getReference('plnprop-autumn');
        $this->assertNotNull($prop->getParent());
    }

    public function testGetChildren()
    {
        $prop = $this->references->getReference('plnprop-season');
        $this->assertEquals(3, count($prop->getChildren()));
    }

    public function testGetNullChildren()
    {
        $prop = $this->references->getReference('plnprop-winter');
        $this->assertEquals(0, count($prop->getChildren()));
    }

    public function testStringValue()
    {
        $prop = $this->references->getReference('plnprop-winter');
        $this->assertFalse($prop->isList());
        $this->assertEquals('not many leaves', $prop->getPropertyValue());
    }

    public function testListValue()
    {
        $prop = $this->references->getReference('plnprop-list');
        $this->assertTrue($prop->isList());
        $values = $prop->getPropertyValue();
        $this->assertTrue(is_array($values));
        $this->assertEquals(3, count($values));
        $this->assertEquals(array('foo', 'bar', 'baz'), $values);
    }
}
